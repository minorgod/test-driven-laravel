<?php

namespace Billing;

use App\Billing\FakePaymentGateway;
use App\Billing\PaymentFailedException;
use App\Billing\StripePaymentGateway;
use Stripe\token;
use Tests\TestCase;

/**
 * Class StripePaymentGatewayTest
 * @package Billing
 */
class StripePaymentGatewayTest extends TestCase
{
    private function lastCharge()
    {
        return \Stripe\Charge::all(
            ['limit' => 1],
            ['api_key' => config('services.stripe.secret')]
        )['data'][0];
    }

    private function newCharges()
    {
        return \Stripe\Charge::all(
            ['limit' => 1,
                'ending_before'=>$this->lastCharge->id],
            ['api_key' => config('services.stripe.secret')]
        )['data'];
    }

    private function validToken()
    {
        return token::create(
            [
                'card' => [
                    'number' => '4242424242424242',
                    'exp_month' => 1,
                    'exp_year' => date('Y') + 1,
                    'cvc' => '123',
                ],


            ],
            ['api_key' => config('services.stripe.secret')]
        )->id;
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->lastCharge = $this->lastCharge();
    }

    /**
     * @test
     */
    function charges_with_a_valid_payment_token_are_successful()
    {
        // Create a new StripePaymentGateway
        $paymentGateway = new StripePaymentGateway(config('services.stripe.secret'));

        // Create a new charge for some amount using a valid token
        $newCharge = $paymentGateway->charge(2500, $this->validToken());

        // Verify the charge completed successfully and there was only 1 new charge.
        $this->assertCount(1, $this->newCharges());
        $this->assertEquals(2500, $this->lastCharge->amount);
    }


}
